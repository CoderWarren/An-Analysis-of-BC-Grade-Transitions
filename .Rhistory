# From: https://catalogue.data.gov.bc.ca/dataset/bc-schools-class-size
#
# Read in the class size data
class_sizes <- data.table::fread("data_schools/class_size_2006-07_to_2021-22.csv")
# Chunk 4: data-prep-1
# Here, we prepare the merged data set
# Combine all the data
data <- rbind(data_1, data_2, data_3)
# Remove all missing values
data <- data[!(data$DENOMINATOR_STUDIED_COHORT=="Msk"|
data$NUMERATOR_NUM_SUCCESSFUL=="Msk"|
data$G2G_TRANSITION_RATE=="Msk"),]
# Make an integer variable storing the year
data$year <- strtoi(substr(data$SCHOOL_YEAR, 1, 4))
# Make the grade to grade transition rates a float
data$rate <- as.double(data$G2G_TRANSITION_RATE)
# Make the number of students an integer
data$num_students <- as.integer(data$DENOMINATOR_STUDIED_COHORT)
# Make the number of students who successfully moved on an integer
data$num_successful <- as.integer(data$NUMERATOR_NUM_SUCCESSFUL)
# Make the student grade a factor
data$grade <- as.factor(data$STUDENT_GRADE)
# Drop the unnecessary columns
data <- subset(data, select=-c(BASE_YEAR, SCHOOL_YEAR, G2G_TRANSITION_RATE,
MEASURE_NAME, DENOMINATOR_STUDIED_COHORT,
NUMERATOR_NUM_SUCCESSFUL, STUDENT_GRADE,
DISTRICT_NAME))
# Chunk 5: data-prep-2
data %>%
filter(DATA_LEVEL == "Province Level") %>%
filter(FACILITY_TYPE == "All Facility Types") -> data_province
# Chunk 6: data-prep-3
# Drop all the rows in our table regarding data on a "Province Level"
# This is because we will not use it for the remainder of the assignment
data_district <- data %>% filter(DATA_LEVEL == "District Level")
data_district$district <- as.integer(data_district$DISTRICT_NUMBER)
# Now that we're on a district level, we can use the location data
data_district <- left_join(x=data_district, y=locations,
by=c("district" = "DISTRICT_NUMBER"))
# Drop columns that aren't used
data_district <- subset(data_district, select=-c(
DISTRICT_PROVINCE, DISTRICT_POSTAL_CODE,
DISTRICT_PHONE_NUMBER, DISTRICT_WEBSITE,
SCHOOL_YEAR))
# Turn our district into a factor variable
data_district$district <- as.factor(data_district$district)
# Check what we have
summary(data_district)
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE)) %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
grade<=3 ~ AVG_CLASS_SIZE_1_3,
grade<=7 ~ AVG_CLASS_SIZE_4_7,
grade<=11 ~ AVG_CLASS_SIZE_8_11,
))
ML_school_data
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE))
ML_school_data <- ML_school_data %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
ML_school_data$grade==1 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==2 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==3 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==4 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==5 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==6 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==7 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==8 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==9 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==10 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==11 ~ AVG_CLASS_SIZE_8_12,
))
ML_school_data
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
# Chunk 1: setup
# Set up everything here. This is hidden from the final output
#install.packages(c("data.table","leaflet"))
library(data.table)
library(leaflet)
library(tidyverse)
library(ggplot2)
library(mgcv)
library(plotly)
library(knitr)
library(widgetframe)
# Chunk 2
#TODO: Add PDF download link
# Chunk 3: read-in
# From: https://catalogue.data.gov.bc.ca/dataset/bc-schools-grade-to-grade-transition
#
# Read in the 1992 to 2001 data
data_1 <- data.table::fread("data_transitions/grtogrtransition_1992-93_to_2000-01.csv")
# Read in the 2001 to 2011 data
data_2 <- data.table::fread("data_transitions/grtogrtransition_2001-02_to_2010-11.csv")
# Read in the 2011 to 2021 data
data_3 <- data.table::fread("data_transitions/grtogrtransition_2011-12_to_2020-21.csv")
# From: https://catalogue.data.gov.bc.ca/dataset/bc-schools-school-district-information
#
# Read in the locations
locations <- data.table::fread("data_districts/current_district_office_information.csv")
# From: https://catalogue.data.gov.bc.ca/dataset/bc-schools-teacher-statistics
#
# Read in teacher "legacy" data
teacher_1 <- data.table::fread("data_districts/legacy-teacher-statistics-19911992-20162017.csv")
# Read in teacher data
teacher_2 <- data.table::fread("data_districts/bc-education-workforce-public-schools-to-2013-2021.csv")
# From: https://catalogue.data.gov.bc.ca/dataset/bc-schools-class-size
#
# Read in the class size data
class_sizes <- data.table::fread("data_schools/class_size_2006-07_to_2021-22.csv")
# Chunk 4: data-prep-1
# Here, we prepare the merged data set
# Combine all the data
data <- rbind(data_1, data_2, data_3)
# Remove all missing values
data <- data[!(data$DENOMINATOR_STUDIED_COHORT=="Msk"|
data$NUMERATOR_NUM_SUCCESSFUL=="Msk"|
data$G2G_TRANSITION_RATE=="Msk"),]
# Make an integer variable storing the year
data$year <- strtoi(substr(data$SCHOOL_YEAR, 1, 4))
# Make the grade to grade transition rates a float
data$rate <- as.double(data$G2G_TRANSITION_RATE)
# Make the number of students an integer
data$num_students <- as.integer(data$DENOMINATOR_STUDIED_COHORT)
# Make the number of students who successfully moved on an integer
data$num_successful <- as.integer(data$NUMERATOR_NUM_SUCCESSFUL)
# Make the student grade a factor
data$grade <- as.factor(data$STUDENT_GRADE)
# Drop the unnecessary columns
data <- subset(data, select=-c(BASE_YEAR, SCHOOL_YEAR, G2G_TRANSITION_RATE,
MEASURE_NAME, DENOMINATOR_STUDIED_COHORT,
NUMERATOR_NUM_SUCCESSFUL, STUDENT_GRADE,
DISTRICT_NAME))
# Chunk 5: data-prep-2
data %>%
filter(DATA_LEVEL == "Province Level") %>%
filter(FACILITY_TYPE == "All Facility Types") -> data_province
# Chunk 6: data-prep-3
# Drop all the rows in our table regarding data on a "Province Level"
# This is because we will not use it for the remainder of the assignment
data_district <- data %>% filter(DATA_LEVEL == "District Level")
data_district$district <- as.integer(data_district$DISTRICT_NUMBER)
# Now that we're on a district level, we can use the location data
data_district <- left_join(x=data_district, y=locations,
by=c("district" = "DISTRICT_NUMBER"))
# Drop columns that aren't used
data_district <- subset(data_district, select=-c(
DISTRICT_PROVINCE, DISTRICT_POSTAL_CODE,
DISTRICT_PHONE_NUMBER, DISTRICT_WEBSITE,
SCHOOL_YEAR))
# Turn our district into a factor variable
data_district$district <- as.factor(data_district$district)
# Check what we have
summary(data_district)
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE))
ML_school_data <- ML_school_data %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
ML_school_data$grade==1 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==2 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==3 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==4 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==5 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==6 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==7 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==8 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==9 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==10 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==11 ~ AVG_CLASS_SIZE_8_12,
))
ML_school_data
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE))
ML_school_data <- ML_school_data %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
ML_school_data$grade==1 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==2 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==3 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==4 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==5 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==6 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==7 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==8 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==9 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==10 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==11 ~ AVG_CLASS_SIZE_8_12,
)) %>%
select(-c(AVG_CLASS_SIZE_1_3, AVG_CLASS_SIZE_4_7, AVG_CLASS_SIZE_8_12))
ML_school_data
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
View(ML_school_data)
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
filter(PUBLIC_OR_INDEPENDENT = "BC Public School")
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE))
ML_school_data <- ML_school_data %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
ML_school_data$grade==1 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==2 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==3 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==4 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==5 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==6 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==7 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==8 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==9 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==10 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==11 ~ AVG_CLASS_SIZE_8_12,
)) %>%
select(-c(AVG_CLASS_SIZE_1_3, AVG_CLASS_SIZE_4_7, AVG_CLASS_SIZE_8_12))
ML_school_data
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
filter(PUBLIC_OR_INDEPENDENT == "BC Public School")
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE))
ML_school_data <- ML_school_data %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
ML_school_data$grade==1 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==2 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==3 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==4 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==5 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==6 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==7 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==8 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==9 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==10 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==11 ~ AVG_CLASS_SIZE_8_12,
)) %>%
select(-c(AVG_CLASS_SIZE_1_3, AVG_CLASS_SIZE_4_7, AVG_CLASS_SIZE_8_12))
ML_school_data
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
unique(ML_school_data$TOTAL_CLASSES_GREATER_30)
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
filter(PUBLIC_OR_INDEPENDENT == "BC Public School")
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE))
ML_school_data <- ML_school_data %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
ML_school_data$grade==1 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==2 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==3 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==4 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==5 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==6 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==7 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==8 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==9 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==10 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==11 ~ AVG_CLASS_SIZE_8_12,
)) %>%
select(-c(AVG_CLASS_SIZE_1_3, AVG_CLASS_SIZE_4_7, AVG_CLASS_SIZE_8_12))
ML_school_data$TOTAL_CLASSES_GREATER_30[is.na(ML_school_data$TOTAL_CLASSES_GREATER_30)] <- 0
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
filter(PUBLIC_OR_INDEPENDENT == "BC Public School")
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE))
ML_school_data <- ML_school_data %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
ML_school_data$grade==1 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==2 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==3 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==4 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==5 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==6 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==7 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==8 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==9 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==10 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==11 ~ AVG_CLASS_SIZE_8_12,
)) %>%
select(-c(AVG_CLASS_SIZE_K, AVG_CLASS_SIZE_1_3,
AVG_CLASS_SIZE_4_7, AVG_CLASS_SIZE_8_12))
ML_school_data$TOTAL_CLASSES_GREATER_30[is.na(ML_school_data$TOTAL_CLASSES_GREATER_30)] <- 0
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
filter(PUBLIC_OR_INDEPENDENT == "BC Public School")
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE))
ML_school_data <- ML_school_data %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
ML_school_data$grade==1 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==2 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==3 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==4 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==5 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==6 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==7 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==8 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==9 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==10 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==11 ~ AVG_CLASS_SIZE_8_12,
)) %>%
select(-c(AVG_CLASS_SIZE_K, AVG_CLASS_SIZE_1_3,
AVG_CLASS_SIZE_4_7, AVG_CLASS_SIZE_8_12))
ML_school_data$TOTAL_CLASSES_GREATER_30[is.na(ML_school_data$TOTAL_CLASSES_GREATER_30)] <- 0
ML_school_data <- na.omit(ML_school_data)
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
filter(PUBLIC_OR_INDEPENDENT == "BC Public School")
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE))
ML_school_data <- ML_school_data %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
ML_school_data$grade==1 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==2 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==3 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==4 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==5 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==6 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==7 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==8 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==9 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==10 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==11 ~ AVG_CLASS_SIZE_8_12,
)) %>%
select(-c(AVG_CLASS_SIZE_K, AVG_CLASS_SIZE_1_3,
AVG_CLASS_SIZE_4_7, AVG_CLASS_SIZE_8_12))
ML_school_data$TOTAL_CLASSES_GREATER_30[is.na(ML_school_data$TOTAL_CLASSES_GREATER_30)] <- 0
ML_school_data$TOTAL_WITH_EA[is.na(ML_school_data$TOTAL_WITH_EA)] <- 0
ML_school_data <- na.omit(ML_school_data)
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
# Prepare the data for data_school from the main data set
data_school <- data %>% filter(DATA_LEVEL == "School Level")
data_school$district <- as.integer(data_school$DISTRICT_NUMBER)
# Prepare the class_sizes dataset for merging
class_sizes$year <- strtoi(substr(class_sizes$SCHOOL_YEAR, 1, 4))
c_size_merge <- class_sizes %>%
filter(DATA_LEVEL == "School Level") %>%
select(-c(DATA_LEVEL, DISTRICT_NUMBER, SCHOOL_NAME,
PUBLIC_OR_INDEPENDENT))
# Prepare data for Machine Learning
ML_school_data <- left_join(x=data_school, y=c_size_merge,
by=c("SCHOOL_NUMBER" = "SCHOOL_NUMBER",
"year" = "year")) %>%
filter(year >= min(c_size_merge$year)) %>%
filter(PUBLIC_OR_INDEPENDENT == "BC Public School") %>%
select(-c(NUM_OF_SCHOOLS_IN_DATA_LEVEL, SCHOOL_YEAR, DISTRICT_NUMBER,
FACILITY_TYPE))
ML_school_data <- ML_school_data %>%
mutate(AVG_CLASS_SIZE_GRADE_GROUP =
case_when(
ML_school_data$grade==1 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==2 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==3 ~ AVG_CLASS_SIZE_1_3,
ML_school_data$grade==4 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==5 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==6 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==7 ~ AVG_CLASS_SIZE_4_7,
ML_school_data$grade==8 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==9 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==10 ~ AVG_CLASS_SIZE_8_12,
ML_school_data$grade==11 ~ AVG_CLASS_SIZE_8_12,
)) %>%
select(-c(AVG_CLASS_SIZE_K, AVG_CLASS_SIZE_1_3,
AVG_CLASS_SIZE_4_7, AVG_CLASS_SIZE_8_12))
ML_school_data$TOTAL_CLASSES_GREATER_30[is.na(ML_school_data$TOTAL_CLASSES_GREATER_30)] <- 0
ML_school_data$TOTAL_WITH_EA[is.na(ML_school_data$TOTAL_WITH_EA)] <- 0
ML_school_data <- na.omit(ML_school_data)
#names(my_data)[names(my_data) == "Sepal.Length"] <- "sepal_length"
ML_school_data %>%
plot_ly(x=~TOTAL_CLASSES, y=~AVG_CLASS_SIZE_GRADE_GROUP, color=~SCHOOL_NUMBER,
type="scatter", mode="markers", size=~rate,
sizes=c(5,70), marker=list(sizemode = 'diameter', opacity=0.5))
